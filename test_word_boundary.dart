import 'package:flutter/material.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  print('üß™ Testing search precision for "riz" vs "bl√©"...\n');
  
  // Test the word boundary logic
  testWordBoundary();
}

void testWordBoundary() {
  print('üìä Testing word boundary detection:');
  
  // Test cases for rice (riz)
  final List<String> testNames = [
    'Riz blanc cru',
    'Riz complet cru', 
    'Riz basmati cru',
    'Bl√© dur cru',
    'Bl√© tendre cru',
    'Vari√©t√© de bl√© riziforme', // This should have lower score for "riz"
    'Riz de Camargue',
    'Sauce au bl√© et riz', // This should match both
    'Rizotto aux champignons', // This should have lower score for "riz"
    'Farine de riz',
  ];
  
  final String query = 'riz';
  
  print('\nüîç Testing for query: "$query"');
  
  for (final name in testNames) {
    final normalizedName = _normalizeString(name);
    final normalizedQuery = _normalizeString(query);
    
    bool exactMatch = normalizedName == normalizedQuery;
    bool startsWithQuery = normalizedName.startsWith(normalizedQuery);
    bool wholeWordMatch = _containsWholeWord(normalizedName, normalizedQuery);
    bool partialMatch = normalizedName.contains(normalizedQuery);
    
    int score = 0;
    String matchType = '';
    
    if (exactMatch) {
      score = 100;
      matchType = 'EXACT';
    } else if (startsWithQuery) {
      score = 90;
      matchType = 'STARTS_WITH';
    } else if (wholeWordMatch) {
      score = 80;
      matchType = 'WHOLE_WORD';
    } else if (partialMatch) {
      score = 50;
      matchType = 'PARTIAL';
    }
    
    if (score > 0) {
      print('  ‚úÖ $name ‚Üí Score: $score ($matchType)');
    } else {
      print('  ‚ùå $name ‚Üí No match');
    }
  }
  
  print('\nüìà Analysis:');
  print('  - "Riz blanc cru" should get high score (STARTS_WITH or WHOLE_WORD)');
  print('  - "Bl√© dur cru" should NOT match');
  print('  - "Rizotto aux champignons" should get lower score (PARTIAL)');
  print('  - "Vari√©t√© de bl√© riziforme" should get lower score (PARTIAL)');
}

String _normalizeString(String input) {
  if (input.isEmpty) return '';
  
  // Conversion en minuscules
  String normalized = input.toLowerCase();
  
  // Suppression des accents
  normalized = normalized
      .replaceAll('√©', 'e')
      .replaceAll('√®', 'e')
      .replaceAll('√™', 'e')
      .replaceAll('√´', 'e')
      .replaceAll('√†', 'a')
      .replaceAll('√¢', 'a')
      .replaceAll('√§', 'a')
      .replaceAll('√Æ', 'i')
      .replaceAll('√Ø', 'i')
      .replaceAll('√¥', 'o')
      .replaceAll('√∂', 'o')
      .replaceAll('√π', 'u')
      .replaceAll('√ª', 'u')
      .replaceAll('√º', 'u')
      .replaceAll('√ß', 'c');
  
  return normalized;
}

bool _containsWholeWord(String text, String word) {
  if (text.isEmpty || word.isEmpty) return false;
  
  // Utilise des d√©limiteurs de mots (espaces, ponctuation, etc.)
  final RegExp regex = RegExp(r'\b' + RegExp.escape(word) + r'\b');
  return regex.hasMatch(text);
}
